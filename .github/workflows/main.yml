name: Deploy ethorian.net (EC2) 

on:
  workflow_dispatch:
    # inputs:
    #   apply:
    #     description: 'Apply the Terraform plan?'
    #     required: true
    #     default: 'true'
  repository_dispatch:
    types: [trigger-deployment]

env:
  #TF_LOG: TRACE
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
  ETHORIAN_NET_HOSTED_ZONE_ID: ${{secrets.ETHORIAN_NET_HOSTED_ZONE_ID}}
  TF_VAR_HTPASSWD_USER: ${{ secrets.HTPASSWD_USER }}
  TF_VAR_HTPASSWD_PASS: ${{ secrets.HTPASSWD_PASS }}

jobs:
  plan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Initialize
      run: terraform init

    - name: Terraform Plan
      env:
        TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        TF_VAR_SSH_PUBLIC_KEY_HOME: ${{ secrets.SSH_PUBLIC_KEY_HOME }}
        TF_VAR_OPEN_SSH_PRIVATE_KEY: ${{ secrets.OPEN_SSH_PRIVATE_KEY }}
        TF_VAR_ETHORIAN_NET_HOSTED_ZONE_ID: ${{ secrets.ETHORIAN_NET_HOSTED_ZONE_ID }}
        TF_VAR_HTPASSWD_USER: ${{ secrets.HTPASSWD_USER }}
        TF_VAR_HTPASSWD_PASS: ${{ secrets.HTPASSWD_PASS }}
      run: terraform plan -out=tfplan

    - name: Upload plan
      uses: actions/upload-artifact@v2
      with:
        name: tfplan
        path: ./artifact-dir

  taint:
    needs: plan
    # if: github.event.inputs.apply == 'true'
    
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Initialize
      run: terraform init

    - name: Taint EC2 Instance
      run: terraform taint aws_instance.ethorian_net_home

  deploy:
    needs: taint
    # if: github.event.inputs.apply == 'true'
    
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Initialize
      run: terraform init

    - name: Terraform Plan
      env:
        TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        TF_VAR_SSH_PUBLIC_KEY_HOME: ${{ secrets.SSH_PUBLIC_KEY_HOME }}
        TF_VAR_OPEN_SSH_PRIVATE_KEY: ${{ secrets.OPEN_SSH_PRIVATE_KEY }}
        TF_VAR_ETHORIAN_NET_HOSTED_ZONE_ID: ${{ secrets.ETHORIAN_NET_HOSTED_ZONE_ID }}
        TF_VAR_HTPASSWD_USER: ${{ secrets.HTPASSWD_USER }}
        TF_VAR_HTPASSWD_PASS: ${{ secrets.HTPASSWD_PASS }}
      run: terraform plan

    - name: Terraform Apply
      # if: github.event.inputs.apply == 'true'
      env:
        TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        TF_VAR_SSH_PUBLIC_KEY_HOME: ${{ secrets.SSH_PUBLIC_KEY_HOME }}
        TF_VAR_OPEN_SSH_PRIVATE_KEY: ${{ secrets.OPEN_SSH_PRIVATE_KEY }}
        TF_VAR_ETHORIAN_NET_HOSTED_ZONE_ID: ${{ secrets.ETHORIAN_NET_HOSTED_ZONE_ID }}
        TF_VAR_HTPASSWD_USER: ${{ secrets.HTPASSWD_USER }}
        TF_VAR_HTPASSWD_PASS: ${{ secrets.HTPASSWD_PASS }}
      run: |
        terraform apply -auto-approve
        echo "instance_public_ip=$(terraform output instance_public_ip)"

  dns:
    needs: deploy
    # if: github.event.inputs.apply == 'true'
    
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Initialize
      run: terraform init

    - name: Terraform Plan
      env:
        TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        TF_VAR_SSH_PUBLIC_KEY_HOME: ${{ secrets.SSH_PUBLIC_KEY_HOME }}
        TF_VAR_OPEN_SSH_PRIVATE_KEY: ${{ secrets.OPEN_SSH_PRIVATE_KEY }}
        TF_VAR_ETHORIAN_NET_HOSTED_ZONE_ID: ${{ secrets.ETHORIAN_NET_HOSTED_ZONE_ID }}
        TF_VAR_HTPASSWD_USER: ${{ secrets.HTPASSWD_USER }}
        TF_VAR_HTPASSWD_PASS: ${{ secrets.HTPASSWD_PASS }}
      run: terraform plan

    - name: Terraform Apply
      # if: github.event.inputs.apply == 'true'
      env:
        TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        TF_VAR_SSH_PUBLIC_KEY_HOME: ${{ secrets.SSH_PUBLIC_KEY_HOME }}
        TF_VAR_OPEN_SSH_PRIVATE_KEY: ${{ secrets.OPEN_SSH_PRIVATE_KEY }}
        TF_VAR_ETHORIAN_NET_HOSTED_ZONE_ID: ${{ secrets.ETHORIAN_NET_HOSTED_ZONE_ID }}
        TF_VAR_HTPASSWD_USER: ${{ secrets.HTPASSWD_USER }}
        TF_VAR_HTPASSWD_PASS: ${{ secrets.HTPASSWD_PASS }}
      run: |
        terraform apply -auto-approve
        echo "instance_public_ip=$(terraform output instance_public_ip)"

  check_site:
    needs: dns
    # if: github.event.inputs.apply == 'true'
    
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Set the maximum runtime for this job

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Wait for Site to Be Ready
      run: |
        end_time=$((SECONDS+600))  # 600 seconds (10 minutes) timeout
        while [[ $SECONDS -lt $end_time ]]; do
          if curl --head --fail http://ethorian.net; then
            echo "Site is responding"
            exit 0  # Success
          fi
          echo "Site is not responding, waiting..."
          sleep 10  # Wait for 10 seconds before retrying
        done
        echo "Site did not respond within the timeout"
        exit 1  # Timeout

  notify:
    needs: [plan, taint, deploy, dns, check_site]
    runs-on: ubuntu-latest
    if: always()  # This ensures notification runs regardless of previous job success/failure
    steps:
      - name: Setup SSH for EC2 Access
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ethorian.net >> ~/.ssh/known_hosts
  
      - name: Notify Webhook on Success
        if: ${{ needs.check_site.result == 'success' }}
        run: |
          instance_ip=$(terraform output -raw instance_public_ip)
          payload=$(jq -n \
                      --arg status "SUCCESS" \
                      --arg ip "$instance_ip" \
                      '{status: $status, ip: $ip}')
          curl -X POST -H "Content-Type: application/json" -d "$payload" ${{ secrets.ETHORIA_DM_SITE_WEBHOOK_URL }}
    
      - name: Notify Webhook on Failure and Send Logs to Discord
        if: ${{ needs.check_site.result == 'failure' }}
        run: |
          instance_ip=$(terraform output -raw instance_public_ip)
          log_contents=$(ssh -o "StrictHostKeyChecking=no" rpetrie@ethorian.net 'cat /var/log/cloud-init-output.log')
          # Send failure notification to your webhook
          payload=$(jq -n \
                      --arg status "FAILURE" \
                      --arg ip "$instance_ip" \
                      --arg logs "$log_contents" \
                      '{status: $status, ip: $ip, logs: $logs}')
          curl -X POST -H "Content-Type: application/json" -d "$payload" ${{ secrets.ETHORIA_DM_SITE_WEBHOOK_URL }}
          # Send logs to Discord
          curl -X POST -H "Content-Type: multipart/form-data" -F "content=Deployment Failed. See attached logs." -F "file=@<(echo \"$log_contents\")" ${{ secrets.ETHORIA_DM_SITE_WEBHOOK_URL }}
          